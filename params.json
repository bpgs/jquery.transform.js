{"name":"Jquery.transform.js","tagline":"jQuery cssHooks adding a cross browser transform property to $.fn.css() and $.fn.animate()","body":"jquery.transform2d.js adds 2d transform capabilities to jQuery `css()` and `animate()` functions.\r\n\r\n[Demo](http://louisremi.github.com/jquery.transform.js/index.html)\r\n\r\nUsage:\r\n======\r\n\r\nSet transform with a string\r\n---------------------------\r\n\r\n    $(elem).css('transform', 'translate(50px, 30px) rotate(25deg) scale(2,.5) skewX(-35deg)');\r\n    $(elem).animate({transform: 'translateY(-100px) rotate(1rad) scaleX(2) skewY(42deg)'});\r\n\r\nYou can use the following list of transform functions:  \r\n- `translateX(<number>px)`  \r\n- `translateY(<number>px)`  \r\n- combined: `translate(<number>px, <number>px)` *the second number is optional and defaults to 0*  \r\n- `scaleX(<number>)`  \r\n- `scaleY(<number>)`  \r\n- combined: `scale(<number>, <number>)` *the second number is optional and defaults to the value of the first one*  \r\n- `rotate(<angle>)` *units for angles are *rad* (default), *deg* or *grad*.*  \r\n- `skewX(<angle>)`  \r\n- `skewY(<angle>)`  \r\n- `matrix(<number>, <number>, <number>, <number>, <number>, <number>)`*\r\n\r\n*`matrix` gives you more control about the resulting transformation, using a [matrix construction set](http://www.useragentman.com/matrix/).  \r\nWhen using it in animations however, it makes it impossible to predict how the current and target transformations are going to be interpolated; there is no way to tell whether elements are going to rotate clockwise or anti-clockwise for instance.\r\n\r\nGet transform\r\n-------------\r\n\r\nreturns a computed transform matrix.\r\n\r\n    $(elem).css('transform') == 'matrix(0,1,-1,0,100,50)';\r\n\r\nRelative animations\r\n-------------------\r\n\r\nRelative animations are possible by prepending \"+=\" to the transform string.\r\n\r\n    $(elem).css('transform', 'rotate(45deg)');\r\n    // using the following syntax, elem will always rotate 90deg anticlockwise\r\n    $(elem).animate({transform: '+=rotate(-90deg)'});\r\n\r\nLimitations:\r\n============\r\n\r\n- requires jQuery 1.4.3+,\r\n- Should you use the *translate* property, then your elements need to be absolutely positionned in a relatively positionned wrapper **or it will fail in IE**,\r\n- transformOrigin is not accessible.\r\n\r\nWhy such restrictions with 'translate'?\r\n---------------------------------------\r\n\r\nSince translate is unavailable in IE<9, we have to emulate it using *top* and *left* properties of the element style.  \r\nThis can, of course, only work if the elements are absolutely positionned in a relatively positionned wrapper.  \r\n\r\nOther plugins position the elements and wrap them transparently.  \r\nI think that transparently messing with the DOM often introduces unpredictible behavior.  \r\nUnpredictible behavior leads developpers to fear plugins.  \r\n*Fear leads to anger. Anger leads to hate. Hate leads to suffering.*  \r\nI prefer leaving this up to you.\r\n\r\nLicense\r\n=======\r\n\r\nDual licensed under GPL and MIT licenses.\r\n\r\nCopyright (c) 2010 [Louis-Rémi Babé](http://twitter.com/louis_remi).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}